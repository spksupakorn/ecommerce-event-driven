version: "3.8"

services:
  # PostgreSQL for Order Service
  order-db:
    image: postgres:16-alpine
    container_name: order-db
    environment:
      POSTGRES_DB: orders_db
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
    ports:
      - "5432:5432"
    volumes:
      - order-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for Inventory Service
  inventory-db:
    image: postgres:16-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventoryuser
      POSTGRES_PASSWORD: inventorypass
    ports:
      - "5433:5432"
    volumes:
      - inventory-data:/var/lib/postgresql/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventoryuser -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgres://orderuser:orderpass@order-db:5432/orders_db?sslmode=disable
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
      SERVER_PORT: 8080
    depends_on:
      order-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment-service
    environment:
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: inventory-service
    environment:
      DATABASE_URL: postgres://inventoryuser:inventorypass@inventory-db:5432/inventory_db?sslmode=disable
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
    depends_on:
      inventory-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  order-data:
  inventory-data:
  rabbitmq-data:

networks:
  ecommerce-network:
    driver: bridge
